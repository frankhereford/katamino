// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// reminder - this cuid() isn't the only option, i think there's an autoincrement as well
model Color {
  id      String  @id @default(cuid())
  name    String  @unique
  hexCode String  @default("#ffffff")
  pieces  Piece[]

  @@map(name: "colors")
}

// a piece is a particular tangible block from the game box, they are used in a penta
model Piece {
  id             String           @id @default(cuid())
  colorId        String           @unique
  shape          Json
  color          Color            @relation(fields: [colorId], references: [id], onDelete: Cascade)
  blocks         Block[]
  AvailableBlock AvailableBlock[]

  @@map(name: "pieces")
}

// a block belongs to a penta
model Block {
  id          String   @id @default(cuid())
  last_update DateTime @default(now()) @updatedAt
  pieceId     String
  pentaId     String
  visible     Boolean  @default(false)
  translation Json
  rotation    Json
  reflection  Boolean
  piece       Piece    @relation(fields: [pieceId], references: [id], onDelete: Cascade)
  penta       Penta    @relation(fields: [pentaId], references: [id], onDelete: Cascade)

  @@map(name: "blocks")
}

// a penta is a particular puzzle board configuration
model Penta {
  id          String  @id @default(cuid())
  userId      String
  columns     Int
  borderWidth Int     @default(2)
  blocks      Block[]
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "pentas")
}

model AvailableBlock {
  id               String         @id @default(cuid())
  last_update      DateTime       @default(now()) @updatedAt
  pieceId          String
  availablePentaId String
  visible          Boolean        @default(false)
  translation      Json
  rotation         Json
  reflection       Boolean
  piece            Piece          @relation(fields: [pieceId], references: [id], onDelete: Cascade)
  availablePenta   AvailablePenta @relation(fields: [availablePentaId], references: [id], onDelete: Cascade)

  @@map(name: "available_blocks")
}

model AvailablePenta {
  id              String           @id @default(cuid())
  columns         Int
  borderWidth     Int              @default(2)
  availableBlocks AvailableBlock[]

  @@map(name: "available_pentas")
}

// üëáüèª Auth from here out

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pentas        Penta[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
