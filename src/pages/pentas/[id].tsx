import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import { type NextPage } from "next";
import Head from "next/head";
import Penta from "../components/Penta";
import Block from "../components/Block";
//import useKeypress from 'react-use-keypress';

import { trpc } from "../../utils/trpc";

const PentaPage: NextPage = () => {
  const { query, isReady: routerReady } = useRouter()
  const { data: penta, refetch: penta_refetch } = trpc.penta.get.useQuery({
    id: String(query.id)
  }, {
    enabled: routerReady
  },);

  const [activeBlock, setActiveBlock] = useState(0)
  //console.log(activeBlock)

  // modify this hook to take a function and the key, and execute the function on keyDown
  // hopefully, reducing its length

  // https://usehooks.com/useKeyPress/
  function useKeyPress(targetKey: string): boolean {
    // State for keeping track of whether key is pressed
    const [keyPressed, setKeyPressed] = useState(false);
    // If pressed key is our target key then set to true
    function downHandler({ key }): void {
      if (key === targetKey) {
        setKeyPressed(true);
      }
    }
    // If released key is our target key then set to false
    const upHandler = ({ key: any }): void => {
      if (key === targetKey) {
        setKeyPressed(false);
      }
    };
    // Add event listeners
    useEffect(() => {
      window.addEventListener("keydown", downHandler);
      window.addEventListener("keyup", upHandler);
      // Remove event listeners on cleanup
      return () => {
        window.removeEventListener("keydown", downHandler);
        window.removeEventListener("keyup", upHandler);
      };
    }, []); // Empty array ensures that effect is only run on mount and unmount
    return keyPressed;
  }

  const happyPress: boolean = useKeyPress("Tab");


  let columnClass = null
  if      (penta?.blocks.length === 3)  { columnClass = 'grid-cols-3'  }
  else if (penta?.blocks.length === 4)  { columnClass = 'grid-cols-4'  }
  else if (penta?.blocks.length === 5)  { columnClass = 'grid-cols-5'  }
  else if (penta?.blocks.length === 6)  { columnClass = 'grid-cols-6'  }
  else if (penta?.blocks.length === 7)  { columnClass = 'grid-cols-6'  }
  else if (penta?.blocks.length === 8)  { columnClass = 'grid-cols-6'  }
  else if (penta?.blocks.length === 9)  { columnClass = 'grid-cols-6'  }
  else if (penta?.blocks.length === 10) { columnClass = 'grid-cols-6'  }
  else if (penta?.blocks.length === 11) { columnClass = 'grid-cols-6'  }
  else if (penta?.blocks.length === 12) { columnClass = 'grid-cols-6'  }

  const classes = ["mt-10", "grid", "items-center", "justify-center", columnClass]

  return (
    <>
      <Head>
        <title>Katamino</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          {happyPress && <h1>Yay!</h1>}
        </div>
        <div>
          <Penta penta={penta} borderWidth={2}></Penta>
        </div>
        <div className={classes.join(" ")}>
          {penta?.blocks.map((block, index) => {
            let classes = []
            // this is cute but just figure out a border
            if (index === activeBlock) {
              classes = ["drop-shadow-lg"]
            }
            else {
              classes = ["blur-[2px]"]
            }
            return (
              <div key={block.id} className={classes.join(" ")}>
                <Block block={block}></Block>
              </div>
            )
          })}
        </div>
      </main>
    </>
  )
}

export default PentaPage